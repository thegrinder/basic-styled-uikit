(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"./src/getting-started.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return d}));var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends.js"),r=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},s="wrapper";function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)(s,Object(o.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"getting-started"},"Getting started"),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"Basic-styled-uikit is ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.npmjs.com/package/basic-styled-uikit"}),"available on npm")," and it can be installed using npm or yarn."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"# Using npm\nnpm install basic-styled-uikit --save\n\n# Using Yarn\nyarn add basic-styled-uikit\n")),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("p",null,"Basic-styled-uikit uses styled-components under the hood and that's why you have to wrap your application with a few theme providers responsible for passing style down to its respective copmonents. The main reason basic-styled-uikit was created was to have totally customizable and themeable base components that you can build on top of. That's why you can pack virtually any style properties into each of the themes. Please refer to the documentation of each of them for more information."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import React from 'react';\n\n// basic-styled-uikit providers\nimport {\n  ModeProvider,\n  TypographyProvider,\n  ButtonProvider,\n  BoxProvider,\n  LinkProvider,\n  FormProvider,\n} from 'basic-styled-uikit';\n\n// corresponding themes\nimport {\n  typographyTheme,\n  buttonTheme,\n  boxTheme,\n  linkTheme,\n  formTheme,\n} from 'path/to/your/custom/theme';\n\n\n// root component\nconst App = ({ children }) => (\n  <ModeProvider>\n    <TypographyProvider theme={typographyTheme.base} darkTheme={typographyTheme.dark}>\n      <BoxProvider theme={boxTheme.base} darkTheme={boxTheme.dark}>\n        <ButtonProvider theme={buttonTheme.base} darkTheme={buttonTheme.dark}>\n          <LinkProvider theme={linkTheme.base} darkTheme={linkTheme.dark}>\n            <FormProvider theme={formTheme.base} darkTheme={formTheme.dark}>\n              <>{children}</>\n            </FormProvider>\n          </LinkProvider>\n        </ButtonProvider>\n      </BoxProvider>\n    </TypographyProvider>\n  </ModeProvider>\n);\n\nApp.propTypes = propTypes;\n\nexport default App;\n")))}d&&d===Object(d)&&Object.isExtensible(d)&&Object.defineProperty(d,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/getting-started.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=src-getting-started.47b0c5c34ed2dde3ef2b.js.map