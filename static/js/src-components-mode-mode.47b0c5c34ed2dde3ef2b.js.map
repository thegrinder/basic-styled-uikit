{"version":3,"sources":["/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/ModeContext.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/ModeProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/mode.mdx","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/useMode.js"],"names":["ModeContext","createContext","undefined","ModeProvider","initialMode","children","useState","mode","setMode","toggleMode","useCallback","prevMode","value","useMemo","Provider","theme","name","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","__position","__code","__scope","this","Playground","Props","useMode","onClick","isMDXComponent","useContext"],"mappings":"6HAAA,yCAEMA,EAAcC,6BAAcC,GAEnBF,M,yiBCOTG,EAAe,SAAC,GAAyC,IAAD,IAAtCC,mBAAsC,MAAxB,QAAwB,EAAfC,EAAe,EAAfA,SAAe,EACpCC,mBAASF,GAD2B,mBACrDG,EADqD,KAC/CC,EAD+C,KAEtDC,EAAaC,uBACjB,kBAAMF,GAAQ,SAAAG,GAAQ,MAAkB,UAAbA,EAAuB,OAAS,aAC3D,IAEIC,EAAQC,mBACZ,iBAAO,CACLN,OACAE,gBAEF,CAACF,EAAME,IAET,OACE,kBAAC,IAAYK,SAAb,CAAsBF,MAAOA,GAC3B,kBAAC,IAAD,CAAeG,MAAO,CAAER,SAASF,KAOxBF,M,6SCxBOa,E,4aAKhBC,GALgBD,EAIQ,UACV,IAGdE,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,eAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,gBACL,sBAAQC,WAAW,MAAnB,iBACH,qBAAG,0BAAYA,WAAW,KAAvB,oBAAH,gNAAgR,0BAAYA,WAAW,KAAvB,SAAhR,QAA0U,0BAAYA,WAAW,KAAvB,QAA1U,KACA,YAAC,IAAD,CAAOC,GAAIrB,IAAcmB,QAAQ,UACjC,uBACA,iBAAQ,CACN,GAAM,WACL,sBAAQC,WAAW,MAAnB,YACH,qBAAG,0BAAYA,WAAW,KAAvB,WAAH,wDAA+G,0BAAYA,WAAW,KAAvB,SAA/G,OAAwK,0BAAYA,WAAW,KAAvB,QAAxK,kBAA2O,0BAAYA,WAAW,KAAvB,gBAA3O,4BACA,uBACA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,mWAAqWC,QAAS,CAC/YN,MAAOO,KAAOA,KAAKP,MAAQA,EAC3BQ,eACAC,UACA3B,iBACA4B,aACCT,QAAQ,eACZ,WAcK,OAAO,YAAC,IAAD,CAAcA,QAAQ,gBACjC,aAdoB,WAAO,IAAD,EAIhBS,cAFFxB,EAFkB,EAElBA,KACAE,EAHkB,EAGlBA,WAEF,OAAO,uBACP,iDAA4B,qBAAIF,GAAhC,SACA,sBAAQyB,QAASvB,GAAjB,kBAON,CAASa,QAAQ,iB,kLAQrBH,EAAWc,gBAAiB,G,gECpE5B,qFAGMF,EAAU,kBAAMG,qBAAWlC,MAElB+B,M","file":"static/js/src-components-mode-mode.43460265.js","sourcesContent":["import { createContext } from 'react';\n\nconst ModeContext = createContext(undefined);\n\nexport default ModeContext;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { oneOf, node } from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\nimport ModeContext from './ModeContext';\n\nconst propTypes = {\n  /** initial mode */\n  initialMode: oneOf(['light', 'dark']),\n  children: node.isRequired,\n};\n\nconst ModeProvider = ({ initialMode = 'light', children }) => {\n  const [mode, setMode] = useState(initialMode);\n  const toggleMode = useCallback(\n    () => setMode(prevMode => (prevMode === 'light' ? 'dark' : 'light')),\n    []\n  );\n  const value = useMemo(\n    () => ({\n      mode,\n      toggleMode,\n    }),\n    [mode, toggleMode]\n  );\n  return (\n    <ModeContext.Provider value={value}>\n      <ThemeProvider theme={{ mode }}>{children}</ThemeProvider>\n    </ModeContext.Provider>\n  );\n};\n\nModeProvider.propTypes = propTypes;\n\nexport default ModeProvider;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport ModeProvider from './ModeProvider';\nimport useMode from './useMode';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"modeprovider\"\n    }}><strong parentName=\"h2\">{`ModeProvider`}</strong></h2>\n    <p><inlineCode parentName=\"p\">{`<ModeProvider />`}</inlineCode>{` is responsible for passing down the current mode down to all the components below in the tree as well as passing it into styled-components' theme. Also, it passes down a method to toggle the mode between `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{`.`}</p>\n    <Props of={ModeProvider} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usemode\"\n    }}><strong parentName=\"h2\">{`useMode`}</strong></h2>\n    <p><inlineCode parentName=\"p\">{`useMode`}</inlineCode>{` is a hook that gives us access to the current mode (`}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{`) and a method `}<inlineCode parentName=\"p\">{`toggleMethod`}</inlineCode>{` to switch between them.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const Example = () => {\\n    const { mode, toggleMode } = useMode()\\n    return (\\n      <div>\\n        <p>\\n          you\\'re currently viewing <b>{mode}</b> mode\\n        </p>\\n        <button onClick={toggleMode}>toggle mode</button>\\n      </div>\\n    )\\n  }\\n  return (\\n    <ModeProvider>\\n      <Example />\\n    </ModeProvider>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      ModeProvider,\n      useMode\n    }} mdxType=\"Playground\">\n  {() => {\n        const Example = () => {\n          const {\n            mode,\n            toggleMode\n          } = useMode();\n          return <div>\n          <p>you're currently viewing <b>{mode}</b> mode</p>\n          <button onClick={toggleMode}>\n            toggle mode\n          </button>\n        </div>;\n        };\n\n        return <ModeProvider mdxType=\"ModeProvider\">\n    <Example mdxType=\"Example\" />\n  </ModeProvider>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import { useContext } from 'react';\nimport ModeContext from './ModeContext';\n\nconst useMode = () => useContext(ModeContext);\n\nexport default useMode;\n"],"sourceRoot":""}