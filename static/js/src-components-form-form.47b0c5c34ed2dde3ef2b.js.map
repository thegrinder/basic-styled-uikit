{"version":3,"sources":["/home/travis/build/thegrinder/basic-styled-uikit/docz/Spinner.js","/home/travis/build/thegrinder/basic-styled-uikit/docz/index.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/FormProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/formSelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/commonFormStyles.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Input/StyledInput.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Input/Input.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/InlineInput/StyledInlineInput.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/InlineInput/InlineInput.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Textarea/StyledTextarea.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Textarea/Textarea.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Select/StyledSelect.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Select/Select.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Radio/StyledRadio.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Radio/Radio.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Checkbox/StyledCheckbox.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Checkbox/Checkbox.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Toggle/ToggleCheckbox.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Toggle/ToggleSlider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/Toggle/Toggle.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Form/form.mdx","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/index.js"],"names":["loading","keyframes","propTypes","color","string","Spinner","styled","span","FormProvider","createProvider","getForm","createSelector","getRegularInputCommonStyle","theme","common","regular","getRegularInputStyle","invalid","state","states","valid","getMiscInputCommonStyle","misc","getMiscInputStyle","getInlineInputCommonStyle","inline","getInlineInputStyle","getToggleStyle","toggle","commonInputStyles","css","rem","miscInputStyles","bool","isRequired","StyledInput","input","Input","rest","submitting","StyledInlineInput","Wrapper","div","SpinnerWrapper","InlineInput","disabled","renderSpinner","StyledTextarea","textarea","Textarea","StyledSelect","select","Select","StyledRadio","attrs","type","Radio","StyledCheckbox","Checkbox","h","number","ToggleCheckbox","ToggleSlider","ToggleLabel","label","Toggle","onChange","name","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","className","__position","__code","__scope","this","Playground","Props","TypographyProvider","normal","borderColor","active","backgroundColor","hover","checked","fontSize","fontFamily","Typography","value","placeholder","isMDXComponent"],"mappings":"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","file":"static/js/src-components-form-form.7b1d8242.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\nimport { string } from 'prop-types';\n\nconst loading = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst propTypes = {\n  color: string,\n};\n\nconst Spinner = styled.span`\n  width: 20px;\n  height: 20px;\n  border-radius: 100%;\n  border: 2px solid ${({ color = '#fff' }) => color};\n  border-bottom-color: transparent;\n  animation: ${loading} 0.75s 0s infinite linear;\n  vertical-align: middle;\n  display: inline-block;\n`;\n\nSpinner.propTypes = propTypes;\n\nexport default Spinner;\n","export { default as Spinner } from './Spinner';\n","import { createProvider } from '../../helpers';\n\nconst FormProvider = createProvider('form');\n\nexport default FormProvider;\n","import { createSelector } from '../../helpers';\n\nexport const getForm = createSelector('form');\n\nexport const getRegularInputCommonStyle = theme =>\n  getForm(theme).common && getForm(theme).common.regular;\n\nexport const getRegularInputStyle = (theme, invalid, state) => {\n  const states = getForm(theme)?.regular?.states;\n  return invalid ? states?.invalid : states?.valid?.[state];\n};\n\nexport const getMiscInputCommonStyle = theme => getForm(theme)?.common?.misc;\n\nexport const getMiscInputStyle = (theme, invalid, state) => {\n  const states = getForm(theme)?.misc?.states;\n  return invalid && state === 'normal'\n    ? states?.invalid\n    : states?.valid?.[state];\n};\n\nexport const getInlineInputCommonStyle = theme =>\n  getForm(theme)?.common?.inline;\n\nexport const getInlineInputStyle = (theme, invalid, state) => {\n  const states = getForm(theme)?.inline?.states;\n  return invalid ? states?.invalid : states?.valid?.[state];\n};\n\nexport const getToggleStyle = (theme, state) =>\n  getForm(theme)?.toggle?.states?.[state];\n","import { css } from 'styled-components';\nimport {\n  getRegularInputCommonStyle,\n  getRegularInputStyle,\n  getMiscInputCommonStyle,\n  getMiscInputStyle,\n} from './formSelectors';\nimport { rem } from '../Typography';\n\nexport const commonInputStyles = css`\n  -webkit-appearance: none;\n  max-width: 100%;\n  width: 100%;\n  border-width: 1px;\n  border-style: solid;\n  border-color: transparent;\n  background-color: transparent;\n  transition: 0.2s ease-in-out;\n  transition-property: color, background-color, border;\n  border-radius: ${rem(6)};\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    color: inherit;\n  }\n  ${({ theme, invalid }) => css`\n    ${getRegularInputCommonStyle(theme)}\n    ${getRegularInputStyle(theme, invalid, 'normal')}\n    &:focus {\n      ${getRegularInputStyle(theme, invalid, 'active')}\n    }\n    &:disabled {\n      ${getRegularInputStyle(theme, invalid, 'disabled')}\n    }\n  `}\n`;\n\nexport const miscInputStyles = css`\n  -webkit-appearance: none;\n  overflow: hidden;\n  box-szing: border-box;\n  display: inline-block;\n  font-size: ${rem(16)};\n  height: 1.5em;\n  width: 1.5em;\n  margin-top: -0.4em;\n  vertical-align: middle;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n  border-width: 1px;\n  border-style: solid;\n  transition: 0.2s ease-in-out;\n  transition-property: background-color, border;\n  cursor: pointer;\n  &:focus {\n    outline: none;\n  }\n  &:disabled {\n    cursor: default;\n    opacity: 0.6;\n  }\n  ${({ theme, invalid }) => css`\n    ${getMiscInputCommonStyle(theme)}\n    ${getMiscInputStyle(theme, invalid, 'normal')}\n    &:focus {\n      ${getMiscInputStyle(theme, invalid, 'active')}\n    }\n    &:checked {\n      ${getMiscInputStyle(theme, invalid, 'checked')}\n    }\n  `}\n`;\n","import styled from 'styled-components';\nimport { bool } from 'prop-types';\nimport { commonInputStyles } from '../commonFormStyles';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n};\n\nconst StyledInput = styled.input`\n  ${commonInputStyles}\n  vertical-align: middle;\n  display: inline-block;\n  height: ${rem(40)};\n  padding: 0 ${rem(10)};\n  overflow: visible;\n`;\n\nStyledInput.propTypes = propTypes;\n\nexport default StyledInput;\n","import React from 'react';\nimport { bool } from 'prop-types';\n\nimport StyledInput from './StyledInput';\n\nconst propTypes = {\n  /** invalid flag */\n  invalid: bool,\n};\n\nconst Input = ({ invalid = false, ...rest }) => (\n  <StyledInput invalid={invalid} {...rest} />\n);\n\nInput.propTypes = propTypes;\n\nexport default Input;\n","import { bool } from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport {\n  getInlineInputCommonStyle,\n  getInlineInputStyle,\n} from '../formSelectors';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n  submitting: bool.isRequired,\n};\n\nconst StyledInlineInput = styled.input`\n  -webkit-appearance: none;\n  box-sizing: border-box;\n  max-width: 100%;\n  width: 100%;\n  border-width: 1px;\n  border-style: solid;\n  border-color: transparent;\n  background-color: transparent;\n  transition: 0.2s ease-in-out;\n  transition-property: color, background-color, border;\n  overflow: visible;\n\n  vertical-align: middle;\n  display: inline-block;\n  border-radius: ${rem(6)};\n  height: ${rem(40)};\n  padding: 0 ${rem(10)};\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    color: inherit;\n  }\n  ${({ theme, invalid, submitting }) => css`\n    ${getInlineInputCommonStyle(theme)}\n    ${getInlineInputStyle(theme, invalid, 'normal')}\n    ${submitting && `padding-right : ${rem(36)};`}\n    &:hover {\n      ${getInlineInputStyle(theme, invalid, 'hover')}\n    }\n    &:focus {\n      outline: none;\n      ${getInlineInputStyle(theme, invalid, 'active')}\n    }\n    &:disabled {\n      ${getInlineInputStyle(theme, invalid, 'disabled')}\n    }\n  `}\n`;\n\nStyledInlineInput.propTypes = propTypes;\n\nexport default StyledInlineInput;\n","import React from 'react';\nimport { bool, node } from 'prop-types';\nimport styled from 'styled-components';\nimport { rem } from '../../Typography';\nimport StyledInlineInput from './StyledInlineInput';\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst SpinnerWrapper = styled.div`\n  position: absolute;\n  right: ${rem(8)};\n  top: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst propTypes = {\n  /** submitting flag that shows a component passed to renderSpinner prop */\n  submitting: bool,\n  /** disabled flag */\n  disabled: bool,\n  /** invalid flag */\n  invalid: bool,\n  /** spinner component shown when submitting flag is true */\n  renderSpinner: node,\n};\n\nconst InlineInput = ({\n  submitting = false,\n  disabled = false,\n  invalid = false,\n  renderSpinner,\n  ...rest\n}) => (\n  <div>\n    <Wrapper>\n      <StyledInlineInput\n        submitting={submitting}\n        disabled={submitting || disabled}\n        invalid={invalid}\n        {...rest}\n      />\n      {submitting && <SpinnerWrapper>{renderSpinner}</SpinnerWrapper>}\n    </Wrapper>\n  </div>\n);\n\nInlineInput.propTypes = propTypes;\n\nexport default InlineInput;\n","import styled from 'styled-components';\nimport { bool } from 'prop-types';\nimport { commonInputStyles } from '../commonFormStyles';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n};\n\nconst StyledTextarea = styled.textarea`\n  ${commonInputStyles}\n  padding: ${rem(4)} ${rem(10)};\n  vertical-align: top;\n  overflow: auto;\n`;\n\nStyledTextarea.propTypes = propTypes;\n\nexport default StyledTextarea;\n","import React from 'react';\nimport { bool } from 'prop-types';\n\nimport StyledTextarea from './StyledTextarea';\n\nconst propTypes = {\n  /** invalid flag */\n  invalid: bool,\n};\n\nconst Textarea = ({ invalid = false, ...rest }) => (\n  <StyledTextarea invalid={invalid} {...rest} />\n);\n\nTextarea.propTypes = propTypes;\n\nexport default Textarea;\n","import styled from 'styled-components';\nimport { bool } from 'prop-types';\nimport { commonInputStyles } from '../commonFormStyles';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n};\n\nconst StyledSelect = styled.select`\n  ${commonInputStyles}\n  text-transform: none;\n  padding: 0 ${rem(10)};\n  vertical-align: middle;\n  display: inline-block;\n  height: ${rem(40)};\n`;\n\nStyledSelect.propTypes = propTypes;\n\nexport default StyledSelect;\n","import React from 'react';\nimport { bool } from 'prop-types';\n\nimport StyledSelect from './StyledSelect';\n\nconst propTypes = {\n  /** invalid flag */\n  invalid: bool,\n};\n\nconst Select = ({ invalid = false, ...rest }) => (\n  <StyledSelect invalid={invalid} {...rest} />\n);\n\nSelect.propTypes = propTypes;\n\nexport default Select;\n","import styled from 'styled-components';\nimport { bool } from 'prop-types';\nimport { miscInputStyles } from '../commonFormStyles';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n};\n\nconst StyledRadio = styled.input.attrs({\n  type: 'radio',\n})`\n  ${miscInputStyles}\n  border-radius: 50%;\n  position: relative;\n  &:checked {\n    &:before {\n      content: '';\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin: auto;\n      width: 0.5em;\n      height: 0.5em;\n      border-radius: 50%;\n      background-color: #fff;\n    }\n  }\n`;\n\nStyledRadio.propTypes = propTypes;\n\nexport default StyledRadio;\n","import React from 'react';\nimport { bool } from 'prop-types';\nimport StyledRadio from './StyledRadio';\n\nconst propTypes = {\n  /** invalid flag */\n  invalid: bool,\n};\n\nconst Radio = ({ invalid = false, ...rest }) => (\n  <StyledRadio invalid={invalid} {...rest} />\n);\n\nRadio.propTypes = propTypes;\n\nexport default Radio;\n","import styled from 'styled-components';\nimport { bool } from 'prop-types';\nimport { miscInputStyles } from '../commonFormStyles';\n\nconst propTypes = {\n  invalid: bool.isRequired,\n};\n\nconst StyledCheckbox = styled.input.attrs({\n  type: 'checkbox',\n})`\n  ${miscInputStyles}\n  border-radius: 0.25em;\n  position: relative;\n  &:checked {\n    &:after {\n      content: '';\n      position: absolute;\n      top: 25%;\n      left: 0;\n      right: 0;\n      margin: auto;\n      width: 50%;\n      height: 25%;\n      transform: rotate(-50deg);\n      border-bottom: 0.125em solid #fff;\n      border-left: 0.125em solid #fff;\n    }\n  }\n`;\n\nStyledCheckbox.propTypes = propTypes;\n\nexport default StyledCheckbox;\n","import React from 'react';\nimport { bool } from 'prop-types';\n\nimport StyledCheckbox from './StyledCheckbox';\n\nconst propTypes = {\n  /** invalid flag */\n  invalid: bool,\n};\n\nconst Checkbox = ({ invalid = false, ...rest }) => (\n  <StyledCheckbox invalid={invalid} {...rest} />\n);\n\nCheckbox.propTypes = propTypes;\n\nexport default Checkbox;\n","import styled, { css } from 'styled-components';\nimport { number } from 'prop-types';\nimport { getToggleStyle } from '../formSelectors';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  h: number.isRequired,\n};\n\nconst ToggleCheckbox = styled.input.attrs({\n  type: 'checkbox',\n})`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n  & + span:before {\n    left: ${rem(4)};\n  }\n  ${({ theme, h }) => css`\n    & + span {\n      ${getToggleStyle(theme, 'normal')}\n    }\n    &:checked + span {\n      ${getToggleStyle(theme, 'checked')}\n    }\n    &:checked + span:before {\n      left: calc(100% - ${rem(h - 4)});\n    }\n  `}\n`;\n\nToggleCheckbox.propTypes = propTypes;\n\nexport default ToggleCheckbox;\n","import styled from 'styled-components';\nimport { number, bool } from 'prop-types';\nimport { rem } from '../../Typography';\n\nconst propTypes = {\n  h: number.isRequired,\n  disabled: bool.isRequired,\n};\n\nconst ToggleSlider = styled.span`\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: ${({ h }) => rem(h)};\n  border-radius: 9999px;\n  transition: background-color 0.2s;\n  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};\n  opacity: ${({ disabled }) => (disabled ? 0.6 : 1)};\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    transition: left 0.2s;\n    bottom: 0;\n    margin: auto;\n    height: ${({ h }) => rem(h - 8)};\n    width: ${({ h }) => rem(h - 8)};\n    background-color: #fff;\n    border-radius: 100%;\n  }\n`;\n\nToggleSlider.propTypes = propTypes;\n\nexport default ToggleSlider;\n","import React from 'react';\nimport { number, bool, func } from 'prop-types';\nimport styled from 'styled-components';\nimport ToggleCheckbox from './ToggleCheckbox';\nimport ToggleSlider from './ToggleSlider';\n\nconst ToggleLabel = styled.label`\n  display: inline-block;\n  width: 100%;\n`;\n\nconst propTypes = {\n  /** height of the Toggle */\n  h: number,\n  /** disabled flag */\n  disabled: bool,\n  /** onChange handler */\n  onChange: func.isRequired,\n};\n\nconst Toggle = ({ h = 34, disabled = false, onChange, ...rest }) => (\n  <ToggleLabel>\n    <ToggleCheckbox h={h} onChange={onChange} disabled={disabled} {...rest} />\n    <ToggleSlider h={h} disabled={disabled} />\n  </ToggleLabel>\n);\n\nToggle.propTypes = propTypes;\n\nexport default Toggle;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { TypographyProvider } from '../Typography';\nimport FormProvider from './FormProvider';\nimport Input from './Input/Input';\nimport InlineInput from './InlineInput/InlineInput';\nimport Textarea from './Textarea/Textarea';\nimport Select from './Select/Select';\nimport Radio from './Radio/Radio';\nimport Checkbox from './Checkbox/Checkbox';\nimport Toggle from './Toggle/Toggle';\nimport { Spinner } from '../../../docz';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"formprovider\"\n    }}><strong parentName=\"h2\">{`FormProvider`}</strong></h2>\n    <p><inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` is responsible for passing down the theme to the all the form components. It expects the theme to be of certain structure.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"input\"\n    }}><strong parentName=\"h2\">{`Input`}</strong></h2>\n    <p>{`Input component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular input (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<input />`}</inlineCode>{` element)`}</p>\n    <Props of={Input} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"inlineinput\"\n    }}><strong parentName=\"h2\">{`InlineInput`}</strong></h2>\n    <p>{`InlineInput component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular input (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<input />`}</inlineCode>{` element). Since forms with inline inputs do not usually have submit buttons (i.e. inline editing), it offers a few other custom props to deal with the loading state: `}<inlineCode parentName=\"p\">{`submitting`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`renderSpinner`}</inlineCode>{`.`}</p>\n    <Props of={InlineInput} className=\"max-width-m\" mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"textarea\"\n    }}><strong parentName=\"h2\">{`Textarea`}</strong></h2>\n    <p>{`Textarea component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular textarea (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<textarea />`}</inlineCode>{` element)`}</p>\n    <Props of={Textarea} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"select\"\n    }}><strong parentName=\"h2\">{`Select`}</strong></h2>\n    <p>{`Select component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular select (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<select />`}</inlineCode>{` element)`}</p>\n    <Props of={Select} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"radio\"\n    }}><strong parentName=\"h2\">{`Radio`}</strong></h2>\n    <p>{`Radio component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular radio input (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<input type=\"radio\" />`}</inlineCode>{` element)`}</p>\n    <Props of={Radio} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkbox\"\n    }}><strong parentName=\"h2\">{`Checkbox`}</strong></h2>\n    <p>{`Checkbox component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{` prop value or its state. You can use any props you would use on a regular checkbox input (i.e. the props are spread over the `}<inlineCode parentName=\"p\">{`<input type=\"checkbox\" />`}</inlineCode>{` element)`}</p>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"toggle\"\n    }}><strong parentName=\"h2\">{`Toggle`}</strong></h2>\n    <p>{`Checkbox component grabs the theme given to `}<inlineCode parentName=\"p\">{`<FormProvider />`}</inlineCode>{` and applies the style defined there under the toggle key. Since there is no native toggle component, it only accepts the following props:`}</p>\n    <Props of={Toggle} mdxType=\"Props\" />\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"example\"\n    }}><strong parentName=\"h3\">{`Example`}</strong></h3>\n    <Playground __position={7} __code={'() => {\\n  const theme = {\\n    regular: {\\n      states: {\\n        valid: {\\n          normal: {\\n            borderColor: \\'#ced4da\\',\\n            color: \\'#161616\\',\\n          },\\n          active: {\\n            borderColor: \\'#1e88e5\\',\\n          },\\n          disabled: {\\n            color: \\'#868e96\\',\\n            backgroundColor: \\'#f8f9fa\\',\\n          },\\n        },\\n        invalid: {\\n          color: \\'#f4511e\\',\\n          borderColor: \\'#f4511e\\',\\n        },\\n      },\\n    },\\n    inline: {\\n      states: {\\n        valid: {\\n          normal: {\\n            color: \\'#161616\\',\\n          },\\n          hover: {\\n            borderColor: \\'#ced4da\\',\\n            color: \\'#161616\\',\\n          },\\n          active: {\\n            borderColor: \\'#1e88e5\\',\\n            color: \\'#161616\\',\\n          },\\n          disabled: {\\n            borderColor: \\'#ced4da\\',\\n            color: \\'#868e96\\',\\n            backgroundColor: \\'#f8f9fa\\',\\n          },\\n        },\\n        invalid: {\\n          color: \\'#f4511e\\',\\n          borderColor: \\'#f4511e\\',\\n        },\\n      },\\n    },\\n    misc: {\\n      states: {\\n        valid: {\\n          normal: {\\n            borderColor: \\'#ced4da\\',\\n          },\\n          active: {\\n            borderColor: \\'#1e88e5\\',\\n          },\\n          checked: {\\n            borderColor: \\'#1e88e5\\',\\n            backgroundColor: \\'#1e88e5\\',\\n          },\\n        },\\n        invalid: {\\n          borderColor: \\'#f4511e\\',\\n        },\\n      },\\n    },\\n    toggle: {\\n      states: {\\n        normal: {\\n          backgroundColor: \\'#ced4da\\',\\n        },\\n        checked: {\\n          backgroundColor: \\'#1e88e5\\',\\n        },\\n      },\\n    },\\n    common: {\\n      regular: {\\n        fontSize: \\'1rem\\',\\n        fontFamily: `\\'Inter var\\', sans-serif`,\\n      },\\n      inline: {\\n        fontSize: \\'1rem\\',\\n        fontFamily: `\\'Inter var\\', sans-serif`,\\n      },\\n      misc: {\\n        fontSize: \\'1rem\\',\\n      },\\n    },\\n  }\\n  const Example = () => (\\n    /* TypographyProvider is required for FormProvider to work */\\n    <TypographyProvider>\\n      <FormProvider theme={theme}>\\n        <div className=\\\"max-width-m\\\">\\n          <h2>Input:</h2>\\n          <Input className=\\\"margin-bottom\\\" />\\n          <Input invalid className=\\\"margin-bottom\\\" />\\n          <Input disabled value=\\\"disabled\\\" className=\\\"margin-bottom\\\" />\\n\\n          <h2>Inline input:</h2>\\n          <InlineInput placeholder=\\\"Inline input\\\" className=\\\"margin-bottom\\\" />\\n          <InlineInput\\n            invalid\\n            placeholder=\\\"Inline input\\\"\\n            className=\\\"margin-bottom\\\"\\n          />\\n          <InlineInput\\n            disabled\\n            placeholder=\\\"Disabled\\\"\\n            className=\\\"margin-bottom\\\"\\n          />\\n\\n          <h2>Textarea:</h2>\\n          <Textarea className=\\\"margin-bottom\\\" />\\n          <Textarea invalid className=\\\"margin-bottom\\\" />\\n          <Textarea disabled className=\\\"margin-bottom\\\" />\\n\\n          <h2>Select:</h2>\\n          <Select className=\\\"margin-bottom\\\">\\n            <option>option one</option>\\n            <option>option two</option>\\n          </Select>\\n          <Select invalid className=\\\"margin-bottom\\\">\\n            <option>option one</option>\\n            <option>option two</option>\\n          </Select>\\n          <Select disabled className=\\\"margin-bottom\\\">\\n            <option>option one</option>\\n            <option>option two</option>\\n          </Select>\\n\\n          <h2>Radio:</h2>\\n          <div className=\\\"margin-bottom\\\">\\n            <Radio />\\n            <Radio invalid />\\n            <Radio disabled />\\n          </div>\\n\\n          <h2>Checkbox:</h2>\\n          <div className=\\\"margin-bottom\\\">\\n            <Checkbox />\\n            <Checkbox invalid />\\n            <Checkbox disabled />\\n          </div>\\n\\n          <h2>Toggle:</h2>\\n          <div className=\\\"max-width-s\\\">\\n            <Toggle onChange={() => {}} />\\n          </div>\\n          <div className=\\\"max-width-s\\\">\\n            <Toggle disabled onChange={() => {}} />\\n          </div>\\n        </div>\\n      </FormProvider>\\n    </TypographyProvider>\\n  )\\n\\n  return <Example />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TypographyProvider,\n      FormProvider,\n      Input,\n      InlineInput,\n      Textarea,\n      Select,\n      Radio,\n      Checkbox,\n      Toggle,\n      Spinner\n    }} mdxType=\"Playground\">\n  {() => {\n        const theme = {\n          regular: {\n            states: {\n              valid: {\n                normal: {\n                  borderColor: '#ced4da',\n                  color: '#161616'\n                },\n                active: {\n                  borderColor: '#1e88e5'\n                },\n                disabled: {\n                  color: '#868e96',\n                  backgroundColor: '#f8f9fa'\n                }\n              },\n              invalid: {\n                color: '#f4511e',\n                borderColor: '#f4511e'\n              }\n            }\n          },\n          inline: {\n            states: {\n              valid: {\n                normal: {\n                  color: '#161616'\n                },\n                hover: {\n                  borderColor: '#ced4da',\n                  color: '#161616'\n                },\n                active: {\n                  borderColor: '#1e88e5',\n                  color: '#161616'\n                },\n                disabled: {\n                  borderColor: '#ced4da',\n                  color: '#868e96',\n                  backgroundColor: '#f8f9fa'\n                }\n              },\n              invalid: {\n                color: '#f4511e',\n                borderColor: '#f4511e'\n              }\n            }\n          },\n          misc: {\n            states: {\n              valid: {\n                normal: {\n                  borderColor: '#ced4da'\n                },\n                active: {\n                  borderColor: '#1e88e5'\n                },\n                checked: {\n                  borderColor: '#1e88e5',\n                  backgroundColor: '#1e88e5'\n                }\n              },\n              invalid: {\n                borderColor: '#f4511e'\n              }\n            }\n          },\n          toggle: {\n            states: {\n              normal: {\n                backgroundColor: '#ced4da'\n              },\n              checked: {\n                backgroundColor: '#1e88e5'\n              }\n            }\n          },\n          common: {\n            regular: {\n              fontSize: '1rem',\n              fontFamily: `'Inter var', sans-serif`\n            },\n            inline: {\n              fontSize: '1rem',\n              fontFamily: `'Inter var', sans-serif`\n            },\n            misc: {\n              fontSize: '1rem'\n            }\n          }\n        };\n\n        const Example = () =>\n        /* TypographyProvider is required for FormProvider to work */\n        <TypographyProvider mdxType=\"TypographyProvider\">\n    <FormProvider theme={theme} mdxType=\"FormProvider\">\n      <div className=\"max-width-m\">\n        <h2>Input:</h2>\n        <Input className=\"margin-bottom\" mdxType=\"Input\" />\n        <Input invalid className=\"margin-bottom\" mdxType=\"Input\" />\n        <Input disabled value=\"disabled\" className=\"margin-bottom\" mdxType=\"Input\" />\n\n        <h2>Inline input:</h2>\n        <InlineInput placeholder=\"Inline input\" className=\"margin-bottom\" mdxType=\"InlineInput\" />\n        <InlineInput invalid placeholder=\"Inline input\" className=\"margin-bottom\" mdxType=\"InlineInput\" />\n        <InlineInput disabled placeholder=\"Disabled\" className=\"margin-bottom\" mdxType=\"InlineInput\" />\n\n        <h2>Textarea:</h2>\n        <Textarea className=\"margin-bottom\" mdxType=\"Textarea\" />\n        <Textarea invalid className=\"margin-bottom\" mdxType=\"Textarea\" />\n        <Textarea disabled className=\"margin-bottom\" mdxType=\"Textarea\" />\n\n        <h2>Select:</h2>\n        <Select className=\"margin-bottom\" mdxType=\"Select\">\n          <option>option one</option>\n          <option>option two</option>\n        </Select>\n        <Select invalid className=\"margin-bottom\" mdxType=\"Select\">\n          <option>option one</option>\n          <option>option two</option>\n        </Select>\n        <Select disabled className=\"margin-bottom\" mdxType=\"Select\">\n          <option>option one</option>\n          <option>option two</option>\n        </Select>\n\n        <h2>Radio:</h2>\n        <div className=\"margin-bottom\">\n          <Radio mdxType=\"Radio\" />\n          <Radio invalid mdxType=\"Radio\" />\n          <Radio disabled mdxType=\"Radio\" />\n        </div>\n\n        <h2>Checkbox:</h2>\n        <div className=\"margin-bottom\">\n          <Checkbox mdxType=\"Checkbox\" />\n          <Checkbox invalid mdxType=\"Checkbox\" />\n          <Checkbox disabled mdxType=\"Checkbox\" />\n        </div>\n\n        <h2>Toggle:</h2>\n        <div className=\"max-width-s\">\n          <Toggle onChange={() => {}} mdxType=\"Toggle\" />\n        </div>\n        <div className=\"max-width-s\">\n          <Toggle disabled onChange={() => {}} mdxType=\"Toggle\" />\n        </div>\n      </div>\n    </FormProvider>\n  </TypographyProvider>;\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <hr></hr>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","export { default as TypographyProvider } from './TypographyProvider';\nexport { default as Text } from './Text/Text';\nexport { default as Heading } from './Heading/Heading';\nexport * from './typographySelectors';\n"],"sourceRoot":""}