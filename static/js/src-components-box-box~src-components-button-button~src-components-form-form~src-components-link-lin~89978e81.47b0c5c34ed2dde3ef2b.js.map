{"version":3,"sources":["/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/StyledBox.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/Box.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/BoxProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/boxSelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/context.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Box/index.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/ModeContext.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/ModeProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/index.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Mode/useMode.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Heading/headingSelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Heading/StyledHeading.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Heading/Heading.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Text/StyledText.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Text/Text.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/Text/textSelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/TypographyProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/typographySelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/helpers/index.js"],"names":["propTypes","bgColor","string","elevation","number","StyledBox","styled","div","theme","css","getBoxBgColor","getBoxElevation","Box","rest","Provider","value","BoxProvider","createProvider","getBox","createSelector","bgColors","getBackgroundColor","elevations","BoxContext","createContext","undefined","useBoxContext","useContext","ModeContext","ModeProvider","initialMode","children","useState","mode","setMode","toggleMode","useCallback","prevMode","useMemo","useMode","getHeadingSizingStyle","sizing","getTypography","heading","sizings","getHeadingColor","color","headingColor","colors","baseColor","getHeadingColorOnBg","typography","headingColorOnBg","onBackground","baseColorOnBg","getHeadingOpacity","emphasis","opacities","getHeadingCommonStyle","common","isRequired","marginBottom","bool","ignoreBackground","StyledHeading","h1","sizingStyle","calcLineHeight","fontSize","getBaseLineHeight","Heading","as","StyledText","span","getTextSizingStyle","getTextCommonStyle","getTextColor","getTextColorOnBg","getTextOpacity","Text","text","textColor","textColorOnBg","TypographyProvider","getColor","getBaseFontSize","baseFontSize","baseLineHeight","rem","pxValue","remValue","includes","Number","replace","num","Math","ceil","key","object","memo","darkTheme","modeContext","memoizedTheme"],"mappings":"kzBAIA,IAAMA,EAAY,CAChBC,QAASC,SACTC,UAAWC,UAGPC,EAAYC,IAAOC,IAAV,KACX,gBAAGC,EAAH,EAAGA,MAAOP,EAAV,EAAUA,QAASE,EAAnB,EAAmBA,UAAnB,OAAmCM,YAAlC,IACCR,GAAO,4BAAyBS,YAAcF,EAAOP,GAA9C,KACPE,GAAaQ,YAAgBH,EAAOL,OAI1CE,EAAUL,UAAYA,EAEPK,Q,uPCLTO,EAAM,SAAC,GAAD,IAAGX,EAAH,EAAGA,QAASE,EAAZ,EAAYA,UAAcU,EAA1B,8CACV,kBAAC,IAAWC,SAAZ,CAAqBC,MAAOd,GAC1B,kBAAC,EAAD,aAAWA,QAASA,EAASE,UAAWA,GAAeU,MAM5CD,M,4OCrBf,kCAEMI,EAAcC,YAAe,OAEpBD,M,qRCJf,sGAEaE,EAASC,YAAe,O,4MAE9B,IAAMT,EAAgB,SAACF,EAAOP,GAAR,yBAC3BiB,EAAOV,UADoB,uBAC3B,EAAeY,gBADY,aAC3B,EAA0BnB,I,mNAErB,IAAMoB,EAAqB,SAAApB,GAAO,OAAI,gBAAGO,EAAH,EAAGA,MAAH,OAC3CE,EAAcF,EAAOP,K,gMAEhB,IAAMU,EAAkB,SAACH,EAAOL,GAAR,yBAC7Be,EAAOV,UADsB,uBAC7B,EAAec,kBADc,aAC7B,EAA4BnB,I,qRCX9B,6GAEaoB,EAAaC,6BAAcC,G,2MAEjC,IAAMC,EAAgB,kBAAMC,qBAAWJ,I,4QCJ9C,uR,omCCAA,yCAEMK,EAAcJ,6BAAcC,GAEnBG,M,yiBCOTC,EAAe,SAAC,GAAyC,IAAD,IAAtCC,mBAAsC,MAAxB,QAAwB,EAAfC,EAAe,EAAfA,SAAe,EACpCC,mBAASF,GAD2B,mBACrDG,EADqD,KAC/CC,EAD+C,KAEtDC,EAAaC,uBACjB,kBAAMF,GAAQ,SAAAG,GAAQ,MAAkB,UAAbA,EAAuB,OAAS,aAC3D,IAEItB,EAAQuB,mBACZ,iBAAO,CACLL,OACAE,gBAEF,CAACF,EAAME,IAET,OACE,kBAAC,IAAYrB,SAAb,CAAsBC,MAAOA,GAC3B,kBAAC,IAAD,CAAeP,MAAO,CAAEyB,SAASF,KAOxBF,M,0PCjCf,qK,0jBCAA,qFAGMU,EAAU,kBAAMZ,qBAAWC,MAElBW,M,kyBCHFC,EAAwB,SAAChC,EAAOiC,GAAR,2BACnCC,YAAclC,UADqB,uBACnC,EAAsBmC,eADa,uBACnC,EAA+BC,eADI,aACnC,EAAyCH,I,sNAEpC,IAAMI,EAAkB,SAACrC,EAAOsC,GAAW,IAAD,UACzCC,EAAY,UAAGL,YAAclC,UAAjB,uBAAG,EAAsBmC,eAAzB,uBAAG,EAA+BK,cAAlC,aAAG,EAAwCF,GACvDG,EAAS,UAAGP,YAAclC,UAAjB,uBAAG,EAAsBwC,cAAzB,aAAG,EAA+BF,GACjD,OAAOC,GAAgBE,G,gNAGlB,IAAMC,EAAsB,SAAC1C,EAAOP,EAAS6C,GAAW,IAAD,UACtDK,EAAaT,YAAclC,GAE3B4C,EAAgB,OACpBD,QADoB,IACpBA,OADoB,YACpBA,EAAYR,eADQ,uBACpB,EAAqBU,oBADD,uBACpB,EAAoCpD,UADhB,aACpB,EAA+C6C,GAE3CQ,EAAa,OAAGH,QAAH,IAAGA,OAAH,YAAGA,EAAYE,oBAAf,uBAAG,EAA2BpD,UAA9B,aAAG,EAAsC6C,GAE5D,OAAOM,GAAoBE,GAAiBT,EAAgBrC,EAAOsC,I,oNAG9D,IAAMS,EAAoB,SAAC/C,EAAOgD,GAAR,yBAC/Bd,YAAclC,UADiB,uBAC/B,EAAsBiD,iBADS,aAC/B,EAAkCD,I,kNAE7B,IAAME,EAAwB,SAAAlD,GAAK,yBACxCkC,YAAclC,UAD0B,uBACxC,EAAsBmC,eADkB,aACxC,EAA+BgB,Q,ofCfjC,IAAM3D,EAAY,CAChB8C,MAAO5C,SAAO0D,WACdnB,OAAQvC,SAAO0D,WACfC,aAAcC,OAAKF,WACnBJ,SAAUtD,SAAO0D,WACjBG,iBAAkBD,OAAKF,WACvB3D,QAASC,UAGL8D,EAAgB1D,IAAO2D,GAAV,KAEf,YAQK,IAPLzD,EAOI,EAPJA,MACAsC,EAMI,EANJA,MACAL,EAKI,EALJA,OACAoB,EAII,EAJJA,aACAL,EAGI,EAHJA,SACAO,EAEI,EAFJA,iBACA9D,EACI,EADJA,QAEMiE,EAAc1B,EAAsBhC,EAAOiC,GACjD,OAAOhC,YAAP,IACIiD,EAAsBlD,GAEtBuD,EACIlB,EAAgBrC,EAAOsC,GACvBI,EAAoB1C,EAAOP,EAAS6C,GAE3BqB,YAAc,OAACD,QAAD,IAACA,OAAD,EAACA,EAAaE,UAC1BP,EAAY,UAAMQ,YAAkB7D,GAAxB,OAAsC,IACxD+C,EAAkB/C,EAAOgD,GAClCU,MAKRF,EAAchE,UAAYA,EAEXgE,Q,4QC7BTM,EAAU,SAAC,GAAD,QACdxB,aADc,MACN,UADM,MAEdU,gBAFc,MAEH,OAFG,MAGdK,oBAHc,aAIdE,wBAJc,SAKdtB,EALc,EAKdA,OACA8B,EANc,EAMdA,GACG1D,EAPW,2FASd,kBAAC,EAAD,aACE0D,GAAIA,EACJ9B,OAAQA,GAAU8B,EAClBV,aAAcA,EACdf,MAAOA,EACPU,SAAUA,EACVO,iBAAkBA,EAClB9D,QAASyB,eACLb,KAMOyD,M,ioCC/Bf,IAAMtE,EAAY,CAChB8C,MAAO5C,SAAO0D,WACdnB,OAAQvC,SAAO0D,WACfC,aAAcC,OAAKF,WACnBJ,SAAUtD,SAAO0D,WACjBG,iBAAkBD,OAAKF,WACvB3D,QAASC,UAGLsE,EAAalE,IAAOmE,KAAV,KAEZ,YAQK,IAPLjE,EAOI,EAPJA,MACAsC,EAMI,EANJA,MACAL,EAKI,EALJA,OACAoB,EAII,EAJJA,aACAL,EAGI,EAHJA,SACAO,EAEI,EAFJA,iBACA9D,EACI,EADJA,QAEMiE,EAAcQ,YAAmBlE,EAAOiC,GAC9C,OAAOhC,YAAP,IACIkE,YAAmBnE,GAEnBuD,EACIa,YAAapE,EAAOsC,GACpB+B,YAAiBrE,EAAOP,EAAS6C,GAExBqB,YAAc,OAACD,QAAD,IAACA,OAAD,EAACA,EAAaE,UAC1BP,EAAY,UAAMQ,YAAkB7D,GAAxB,OAAsC,IACxDsE,YAAetE,EAAOgD,GAC/BU,MAKRM,EAAWxE,UAAYA,EAERwE,Q,mQC9BTO,EAAO,SAAC,GAAD,QACXtC,cADW,MACF,IADE,MAEXK,aAFW,MAEH,UAFG,MAGXiB,wBAHW,aAIXF,oBAJW,aAKXL,gBALW,MAKA,OALA,MAMXe,UANW,MAMN,OANM,EAOR1D,EAPQ,2FASX,kBAAC,EAAD,aACE0D,GAAIA,EACJV,aAAcA,EACdpB,OAAQA,EACRK,MAAOA,EACPU,SAAUA,EACVO,iBAAkBA,EAClB9D,QAASyB,eACLb,KAMOkE,M,wQC3Cf,wOAEaL,EAAqB,SAAClE,EAAOiC,GAAR,2BAChCC,YAAclC,UADkB,uBAChC,EAAsBwE,YADU,uBAChC,EAA4BpC,eADI,aAChC,EAAsCH,I,qOAEjC,IAAMmC,EAAe,SAACpE,EAAOsC,GAAW,IAAD,UACtCmC,EAAS,UAAGvC,YAAclC,UAAjB,uBAAG,EAAsBwE,YAAzB,uBAAG,EAA4BhC,cAA/B,aAAG,EAAqCF,GACjDG,EAAS,UAAGP,YAAclC,UAAjB,uBAAG,EAAsBwC,cAAzB,aAAG,EAA+BF,GACjD,OAAOmC,GAAahC,G,+NAGf,IAAM4B,EAAmB,SAACrE,EAAOP,EAAS6C,GAAW,IAAD,UACnDK,EAAaT,YAAclC,GAE3B0E,EAAa,OAAG/B,QAAH,IAAGA,OAAH,YAAGA,EAAY6B,YAAf,uBAAG,EAAkB3B,oBAArB,uBAAG,EAAiCpD,UAApC,aAAG,EAA4C6C,GAE5DQ,EAAa,OAAGH,QAAH,IAAGA,OAAH,YAAGA,EAAYE,oBAAf,uBAAG,EAA2BpD,UAA9B,aAAG,EAAsC6C,GAE5D,OAAOoC,GAAiB5B,GAAiBsB,EAAapE,EAAOsC,I,mOAGxD,IAAMgC,EAAiB,SAACtE,EAAOgD,GAAR,yBAC5Bd,YAAclC,UADc,uBAC5B,EAAsBiD,iBADM,aAC5B,EAAkCD,I,iOAE7B,IAAMmB,EAAqB,SAAAnE,GAAK,yBAAIkC,YAAclC,UAAlB,uBAAI,EAAsBwE,YAA1B,aAAI,EAA4BrB,Q,uTCxBvE,kCAEMwB,EAAqBlE,YAAe,cAE3BkE,M,wTCJf,0KAEazC,EAAgBvB,YAAe,c,iOAErC,IAAMiE,EAAW,SAAAtC,GAAK,OAAI,oBAAGtC,EAAH,EAAGA,MAAH,iBAC/BkC,EAAclC,UADiB,uBAC/B,EAAsBwC,cADS,aAC/B,EAA+BF,K,oMAE1B,IAAMuC,EAAkB,SAAA7E,GAAK,uBAAIkC,EAAclC,UAAlB,aAAI,EAAsB8E,c,2MAEvD,IAAMjB,EAAoB,SAAA7D,GAAK,uBAAIkC,EAAclC,UAAlB,aAAI,EAAsB+E,gB,qOAEzD,IAAMC,EAAM,SAAAC,GAAO,OAAI,YAAgB,IAAbjF,EAAY,EAAZA,MACzB8E,EAAeD,EAAgB7E,IAAU,GAC/C,MAAM,GAAN,OAAUiF,EAAUH,EAApB,S,uNAGK,IAAMnB,EAAiB,SAAAC,GAAQ,OAAI,YAAgB,IAAb5D,EAAY,EAAZA,MACrC+E,EAAiBlB,EAAkB7D,GAEzC,IAAK4D,IAAamB,EAChB,OAAO,IAGT,IAAMG,EAAWtB,EAASuB,SAAS,OAC/BvB,EACAoB,EAAII,OAAOxB,EAASyB,QAAQ,KAAM,KAAlCL,CAAwC,CAAEhF,UACxCsF,EAAMF,OAAOF,EAASG,QAAQ,MAAO,KAE3C,MAAM,GAAN,OAAWE,KAAKC,KAAKF,EAAMP,GAAkBA,EAAkBO,K,kkCCvB1D,IAAM3E,EAAiB,SAAA8E,GAAG,OAAI,SAAAzF,GAAK,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAQyF,K,sMAE/C,IAAMhF,EAAiB,SAAAgF,GAEnBC,SACIA,SAqBb,OAAOC,gBAlBU,SAAC,GAAwC,IAAD,IAArC3F,aAAqC,MAA7B,GAA6B,EAAzB4F,EAAyB,EAAzBA,UAAcvF,EAAW,qCACjDwF,EAAc9D,cACd+D,EAAgBhE,mBACpB,iCACG2D,E,yVADH,IAEOzF,EAFP,GAGQ6F,GAAoC,SAArBA,EAAYpE,MAAmBmE,EAC9CA,EACA,OAGR,CAACA,EAAWC,EAAa7F,IAE3B,OAAO,kBAAC,IAAD,aAAeA,MAAO8F,GAAmBzF,Q","file":"static/js/src-components-box-box~src-components-button-button~src-components-form-form~src-components-link-lin~89978e81.650f81b4.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { string, number } from 'prop-types';\nimport { getBoxBgColor, getBoxElevation } from './boxSelectors';\n\nconst propTypes = {\n  bgColor: string,\n  elevation: number,\n};\n\nconst StyledBox = styled.div`\n  ${({ theme, bgColor, elevation }) => css`\n    ${bgColor && `background-color: ${getBoxBgColor(theme, bgColor)};`}\n    ${elevation && getBoxElevation(theme, elevation)}}\n  `}\n`;\n\nStyledBox.propTypes = propTypes;\n\nexport default StyledBox;\n","import React from 'react';\nimport { string, number } from 'prop-types';\n\nimport StyledBox from './StyledBox';\nimport { BoxContext } from './context';\n\nconst propTypes = {\n  /** bgColors keys in the theme passed to <BoxProvider /> */\n  bgColor: string,\n  /** elevations keys in the theme passed to <BoxProvider /> */\n  elevation: number,\n};\n\nconst Box = ({ bgColor, elevation, ...rest }) => (\n  <BoxContext.Provider value={bgColor}>\n    <StyledBox bgColor={bgColor} elevation={elevation} {...rest} />\n  </BoxContext.Provider>\n);\n\nBox.propTypes = propTypes;\n\nexport default Box;\n","import { createProvider } from '../../helpers';\n\nconst BoxProvider = createProvider('box');\n\nexport default BoxProvider;\n","import { createSelector } from '../../helpers';\n\nexport const getBox = createSelector('box');\n\nexport const getBoxBgColor = (theme, bgColor) =>\n  getBox(theme)?.bgColors?.[bgColor];\n\nexport const getBackgroundColor = bgColor => ({ theme }) =>\n  getBoxBgColor(theme, bgColor);\n\nexport const getBoxElevation = (theme, elevation) =>\n  getBox(theme)?.elevations?.[elevation];\n","import { createContext, useContext } from 'react';\n\nexport const BoxContext = createContext(undefined);\n\nexport const useBoxContext = () => useContext(BoxContext);\n","export { default as BoxProvider } from './BoxProvider';\nexport { default as Box } from './Box';\nexport { useBoxContext } from './context';\nexport { getBackgroundColor } from './boxSelectors';\n","import { createContext } from 'react';\n\nconst ModeContext = createContext(undefined);\n\nexport default ModeContext;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { oneOf, node } from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\nimport ModeContext from './ModeContext';\n\nconst propTypes = {\n  /** initial mode */\n  initialMode: oneOf(['light', 'dark']),\n  children: node.isRequired,\n};\n\nconst ModeProvider = ({ initialMode = 'light', children }) => {\n  const [mode, setMode] = useState(initialMode);\n  const toggleMode = useCallback(\n    () => setMode(prevMode => (prevMode === 'light' ? 'dark' : 'light')),\n    []\n  );\n  const value = useMemo(\n    () => ({\n      mode,\n      toggleMode,\n    }),\n    [mode, toggleMode]\n  );\n  return (\n    <ModeContext.Provider value={value}>\n      <ThemeProvider theme={{ mode }}>{children}</ThemeProvider>\n    </ModeContext.Provider>\n  );\n};\n\nModeProvider.propTypes = propTypes;\n\nexport default ModeProvider;\n","export { default as ModeProvider } from './ModeProvider';\nexport { default as useMode } from './useMode';\n","import { useContext } from 'react';\nimport ModeContext from './ModeContext';\n\nconst useMode = () => useContext(ModeContext);\n\nexport default useMode;\n","import { getTypography } from '../typographySelectors';\n\nexport const getHeadingSizingStyle = (theme, sizing) =>\n  getTypography(theme)?.heading?.sizings?.[sizing];\n\nexport const getHeadingColor = (theme, color) => {\n  const headingColor = getTypography(theme)?.heading?.colors?.[color];\n  const baseColor = getTypography(theme)?.colors?.[color];\n  return headingColor || baseColor;\n};\n\nexport const getHeadingColorOnBg = (theme, bgColor, color) => {\n  const typography = getTypography(theme);\n\n  const headingColorOnBg =\n    typography?.heading?.onBackground?.[bgColor]?.[color];\n\n  const baseColorOnBg = typography?.onBackground?.[bgColor]?.[color];\n\n  return headingColorOnBg || baseColorOnBg || getHeadingColor(theme, color);\n};\n\nexport const getHeadingOpacity = (theme, emphasis) =>\n  getTypography(theme)?.opacities?.[emphasis];\n\nexport const getHeadingCommonStyle = theme =>\n  getTypography(theme)?.heading?.common;\n","import styled, { css } from 'styled-components';\nimport { string, bool } from 'prop-types';\nimport { getBaseLineHeight, calcLineHeight } from '../typographySelectors';\nimport {\n  getHeadingSizingStyle,\n  getHeadingColor,\n  getHeadingColorOnBg,\n  getHeadingCommonStyle,\n  getHeadingOpacity,\n} from './headingSelectors';\n\nconst propTypes = {\n  color: string.isRequired,\n  sizing: string.isRequired,\n  marginBottom: bool.isRequired,\n  emphasis: string.isRequired,\n  ignoreBackground: bool.isRequired,\n  bgColor: string,\n};\n\nconst StyledHeading = styled.h1`\n  display: block;\n  ${({\n    theme,\n    color,\n    sizing,\n    marginBottom,\n    emphasis,\n    ignoreBackground,\n    bgColor,\n  }) => {\n    const sizingStyle = getHeadingSizingStyle(theme, sizing);\n    return css`\n      ${getHeadingCommonStyle(theme, sizing)}\n      color: ${\n        ignoreBackground\n          ? getHeadingColor(theme, color)\n          : getHeadingColorOnBg(theme, bgColor, color)\n      };\n      line-height: ${calcLineHeight(sizingStyle?.fontSize)};\n      margin-bottom: ${marginBottom ? `${getBaseLineHeight(theme)}rem` : '0'};\n      opacity: ${getHeadingOpacity(theme, emphasis)};\n      ${sizingStyle}\n    `;\n  }}\n`;\n\nStyledHeading.propTypes = propTypes;\n\nexport default StyledHeading;\n","import React from 'react';\nimport { string, bool, oneOf } from 'prop-types';\nimport StyledHeading from './StyledHeading';\nimport { useBoxContext } from '../../Box';\n\nconst propTypes = {\n  /** sizings keys in the theme passed to <TypographyProvider /> */\n  sizing: oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  /** colors keys in the theme passed to <TypographyProvider /> */\n  color: string,\n  /** opacities keys in the theme passed to <TypographyProvider /> */\n  emphasis: string,\n  /** determines whether the color defined for the background is ignored */\n  ignoreBackground: bool,\n  /** determines the html tag and size, if sizing prop is not specified */\n  as: oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']).isRequired,\n  /** if true adds a bottom margin according to vertical rhythm */\n  marginBottom: bool,\n};\n\nconst Heading = ({\n  color = 'neutral',\n  emphasis = 'high',\n  marginBottom = false,\n  ignoreBackground = false,\n  sizing,\n  as,\n  ...rest\n}) => (\n  <StyledHeading\n    as={as}\n    sizing={sizing || as}\n    marginBottom={marginBottom}\n    color={color}\n    emphasis={emphasis}\n    ignoreBackground={ignoreBackground}\n    bgColor={useBoxContext()}\n    {...rest}\n  />\n);\n\nHeading.propTypes = propTypes;\n\nexport default Heading;\n","import styled, { css } from 'styled-components';\nimport { string, bool } from 'prop-types';\n\nimport { getBaseLineHeight, calcLineHeight } from '../typographySelectors';\nimport {\n  getTextSizingStyle,\n  getTextColor,\n  getTextCommonStyle,\n  getTextOpacity,\n  getTextColorOnBg,\n} from './textSelectors';\n\nconst propTypes = {\n  color: string.isRequired,\n  sizing: string.isRequired,\n  marginBottom: bool.isRequired,\n  emphasis: string.isRequired,\n  ignoreBackground: bool.isRequired,\n  bgColor: string,\n};\n\nconst StyledText = styled.span`\n  display: block;\n  ${({\n    theme,\n    color,\n    sizing,\n    marginBottom,\n    emphasis,\n    ignoreBackground,\n    bgColor,\n  }) => {\n    const sizingStyle = getTextSizingStyle(theme, sizing);\n    return css`\n      ${getTextCommonStyle(theme)}\n      color: ${\n        ignoreBackground\n          ? getTextColor(theme, color)\n          : getTextColorOnBg(theme, bgColor, color)\n      };\n      line-height: ${calcLineHeight(sizingStyle?.fontSize)};\n      margin-bottom: ${marginBottom ? `${getBaseLineHeight(theme)}rem` : '0'};\n      opacity: ${getTextOpacity(theme, emphasis)};\n      ${sizingStyle}\n    `;\n  }}\n`;\n\nStyledText.propTypes = propTypes;\n\nexport default StyledText;\n","import React from 'react';\nimport { string, bool, oneOf } from 'prop-types';\nimport StyledText from './StyledText';\nimport { useBoxContext } from '../../Box';\n\nconst propTypes = {\n  /** sizings keys in the theme passed to <TypographyProvider /> */\n  sizing: string,\n  /** colors keys in the theme passed to <TypographyProvider /> */\n  color: string,\n  /** opacities keys in the theme passed to <TypographyProvider /> */\n  emphasis: string,\n  /** determines whether the color defined for the background is ignored */\n  ignoreBackground: bool,\n  /** rendered html tag */\n  as: oneOf(['span', 'p']),\n  /** if true adds a bottom margin according to vertical rhythm */\n  marginBottom: bool,\n};\n\nconst Text = ({\n  sizing = 'm',\n  color = 'neutral',\n  ignoreBackground = false,\n  marginBottom = false,\n  emphasis = 'high',\n  as = 'span',\n  ...rest\n}) => (\n  <StyledText\n    as={as}\n    marginBottom={marginBottom}\n    sizing={sizing}\n    color={color}\n    emphasis={emphasis}\n    ignoreBackground={ignoreBackground}\n    bgColor={useBoxContext()}\n    {...rest}\n  />\n);\n\nText.propTypes = propTypes;\n\nexport default Text;\n","import { getTypography } from '../typographySelectors';\n\nexport const getTextSizingStyle = (theme, sizing) =>\n  getTypography(theme)?.text?.sizings?.[sizing];\n\nexport const getTextColor = (theme, color) => {\n  const textColor = getTypography(theme)?.text?.colors?.[color];\n  const baseColor = getTypography(theme)?.colors?.[color];\n  return textColor || baseColor;\n};\n\nexport const getTextColorOnBg = (theme, bgColor, color) => {\n  const typography = getTypography(theme);\n\n  const textColorOnBg = typography?.text?.onBackground?.[bgColor]?.[color];\n\n  const baseColorOnBg = typography?.onBackground?.[bgColor]?.[color];\n\n  return textColorOnBg || baseColorOnBg || getTextColor(theme, color);\n};\n\nexport const getTextOpacity = (theme, emphasis) =>\n  getTypography(theme)?.opacities?.[emphasis];\n\nexport const getTextCommonStyle = theme => getTypography(theme)?.text?.common;\n","import { createProvider } from '../../helpers';\n\nconst TypographyProvider = createProvider('typography');\n\nexport default TypographyProvider;\n","import { createSelector } from '../../helpers';\n\nexport const getTypography = createSelector('typography');\n\nexport const getColor = color => ({ theme }) =>\n  getTypography(theme)?.colors?.[color];\n\nexport const getBaseFontSize = theme => getTypography(theme)?.baseFontSize;\n\nexport const getBaseLineHeight = theme => getTypography(theme)?.baseLineHeight;\n\nexport const rem = pxValue => ({ theme }) => {\n  const baseFontSize = getBaseFontSize(theme) || 16;\n  return `${pxValue / baseFontSize}rem`;\n};\n\nexport const calcLineHeight = fontSize => ({ theme }) => {\n  const baseLineHeight = getBaseLineHeight(theme);\n\n  if (!fontSize || !baseLineHeight) {\n    return 1.5;\n  }\n\n  const remValue = fontSize.includes('rem')\n    ? fontSize\n    : rem(Number(fontSize.replace('px', '')))({ theme });\n  const num = Number(remValue.replace('rem', ''));\n\n  return `${(Math.ceil(num / baseLineHeight) * baseLineHeight) / num}`;\n};\n","import React, { useMemo, memo } from 'react';\nimport { object } from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\nimport { useMode } from '../components/Mode';\n\nexport const createSelector = key => theme => theme?.[key];\n\nexport const createProvider = key => {\n  const propTypes = {\n    theme: object,\n    darkTheme: object,\n  };\n\n  const Provider = ({ theme = {}, darkTheme, ...rest }) => {\n    const modeContext = useMode();\n    const memoizedTheme = useMemo(\n      () => ({\n        [key]: {\n          ...theme,\n          ...(modeContext && modeContext.mode === 'dark' && darkTheme\n            ? darkTheme\n            : {}),\n        },\n      }),\n      [darkTheme, modeContext, theme]\n    );\n    return <ThemeProvider theme={memoizedTheme} {...rest} />;\n  };\n\n  Provider.propTypes = propTypes;\n\n  return memo(Provider);\n};\n"],"sourceRoot":""}