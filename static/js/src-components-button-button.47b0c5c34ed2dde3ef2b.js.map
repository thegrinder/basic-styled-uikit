{"version":3,"sources":["/home/travis/build/thegrinder/basic-styled-uikit/docz/Spinner.js","/home/travis/build/thegrinder/basic-styled-uikit/docz/index.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Button/ButtonProvider.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Button/buttonSelectors.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Button/StyledButton.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Button/Button.js","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Button/button.mdx","/home/travis/build/thegrinder/basic-styled-uikit/src/components/Typography/index.js"],"names":["loading","keyframes","propTypes","color","string","Spinner","styled","span","ButtonProvider","createProvider","getButton","createSelector","getBtnTypeStyle","theme","btntype","state","btnTypes","getBtnSizingStyle","sizing","sizings","getBtnCommonStyle","common","isRequired","StyledButton","button","rem","css","ContentWrapper","submitting","bool","SpinnerWrapper","Button","btnType","renderSpinner","children","as","rest","name","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","__position","__code","__scope","this","Playground","Props","TypographyProvider","ModeProvider","useMode","default","normal","backgroundColor","hover","active","disabled","primary","danger","s","padding","lineHeight","fontSize","m","l","fontWeight","fontFamily","Typography","className","isMDXComponent"],"mappings":"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","file":"static/js/src-components-button-button.1b39cdd6.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\nimport { string } from 'prop-types';\n\nconst loading = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst propTypes = {\n  color: string,\n};\n\nconst Spinner = styled.span`\n  width: 20px;\n  height: 20px;\n  border-radius: 100%;\n  border: 2px solid ${({ color = '#fff' }) => color};\n  border-bottom-color: transparent;\n  animation: ${loading} 0.75s 0s infinite linear;\n  vertical-align: middle;\n  display: inline-block;\n`;\n\nSpinner.propTypes = propTypes;\n\nexport default Spinner;\n","export { default as Spinner } from './Spinner';\n","import { createProvider } from '../../helpers';\n\nconst ButtonProvider = createProvider('button');\n\nexport default ButtonProvider;\n","import { createSelector } from '../../helpers';\n\nexport const getButton = createSelector('button');\n\nexport const getBtnTypeStyle = (theme, btntype, state) =>\n  getButton(theme)?.btnTypes?.[btntype]?.[state];\n\nexport const getBtnSizingStyle = (theme, sizing) =>\n  getButton(theme)?.sizings?.[sizing];\n\nexport const getBtnCommonStyle = theme => getButton(theme)?.common;\n","import styled, { css } from 'styled-components';\nimport { string } from 'prop-types';\nimport { rem } from '../Typography';\nimport {\n  getBtnTypeStyle,\n  getBtnSizingStyle,\n  getBtnCommonStyle,\n} from './buttonSelectors';\n\nconst propTypes = {\n  btntype: string.isRequired,\n  sizing: string.isRequired,\n};\n\nconst StyledButton = styled.button`\n  border: none;\n  overflow: visible;\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n  text-decoration: none;\n  transition: 0.1s ease-in-out;\n  transition-property: color, background-color, border-color;\n  cursor: pointer;\n  outline: none;\n  border-width: 1px;\n  border-style: solid;\n  border-color: transparent;\n  background-color: transparent;\n  border-radius: ${rem(6)};\n  &:disabled {\n    cursor: default;\n  }\n  ${({ theme, btntype, sizing }) => css`\n    ${getBtnCommonStyle(theme)}\n    ${getBtnSizingStyle(theme, sizing)}\n    ${getBtnTypeStyle(theme, btntype, 'normal')}\n    &:hover,\n    &:focus {\n      ${getBtnTypeStyle(theme, btntype, 'hover')}\n    }\n    &:active {\n      ${getBtnTypeStyle(theme, btntype, 'active')}\n    }\n    &:disabled {\n      ${getBtnTypeStyle(theme, btntype, 'disabled')}\n    }\n  `}\n`;\n\nStyledButton.propTypes = propTypes;\n\nexport default StyledButton;\n","import React from 'react';\nimport { node, bool, string, oneOfType, oneOf, func } from 'prop-types';\nimport styled from 'styled-components';\nimport StyledButton from './StyledButton';\n\nconst ContentWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  opacity: ${({ submitting }) => (submitting ? '0' : '1')};\n`;\n\nContentWrapper.propTypes = {\n  submitting: bool.isRequired,\n};\n\nconst SpinnerWrapper = styled.span`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst propTypes = {\n  /** submitting flag that shows a component passed to renderSpinner prop */\n  submitting: bool,\n  /** btnTypes keys in the theme passed to <ButtonProvider /> */\n  btnType: string,\n  /** sizings keys in the theme passed to <ButtonProvider /> */\n  sizing: string,\n  /** spinner component shown when submitting flag is true */\n  renderSpinner: node,\n  /** rendered html tag or custom router link component */\n  as: oneOfType([oneOf(['a', 'button']), func]),\n  children: node,\n};\n\nconst Button = ({\n  btnType: btntype = 'default',\n  sizing = 'm',\n  submitting = false,\n  renderSpinner,\n  children,\n  as = 'button',\n  ...rest\n}) => (\n  <StyledButton as={as} sizing={sizing} btntype={btntype} {...rest}>\n    {submitting && <SpinnerWrapper>{renderSpinner}</SpinnerWrapper>}\n    <ContentWrapper submitting={submitting}>{children}</ContentWrapper>\n  </StyledButton>\n);\n\nButton.propTypes = propTypes;\n\nexport default Button;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { TypographyProvider } from '../Typography';\nimport { ModeProvider, useMode } from '../Mode';\nimport ButtonProvider from './ButtonProvider';\nimport Button from './Button';\nimport { Spinner } from '../../../docz';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"buttonprovider\"\n    }}><strong parentName=\"h2\">{`ButtonProvider`}</strong></h2>\n    <p><inlineCode parentName=\"p\">{`<ButtonProvider />`}</inlineCode>{` is responsible for passing down the theme to the `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component. It expects the theme to be of certain structure.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"button\"\n    }}><strong parentName=\"h2\">{`Button`}</strong></h2>\n    <p>{`Button component grabs the theme given to `}<inlineCode parentName=\"p\">{`<ButtonProvider />`}</inlineCode>{` and applies the style defined there based on the given `}<inlineCode parentName=\"p\">{`btnType`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sizing`}</inlineCode>{` prop values. It also accepts a few different non-theme related props for convenience reasons.`}</p>\n    <Props of={Button} mdxType=\"Props\" />\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"example\"\n    }}><strong parentName=\"h3\">{`Example`}</strong></h3>\n    <Playground __position={1} __code={'() => {\\n  const theme = {\\n    btnTypes: {\\n      default: {\\n        normal: {\\n          color: \\'#fff\\',\\n          backgroundColor: \\'#868e96\\',\\n        },\\n        hover: {\\n          backgroundColor: \\'#a1a7ae\\',\\n        },\\n        active: {\\n          backgroundColor: \\'#6c747d\\',\\n        },\\n        disabled: {\\n          backgroundColor: \\'#868e964d\\',\\n        },\\n      },\\n      primary: {\\n        normal: {\\n          color: \\'#fff\\',\\n          backgroundColor: \\'#1e88e5\\',\\n        },\\n        hover: {\\n          backgroundColor: \\'#4ca0ea\\',\\n        },\\n        active: {\\n          backgroundColor: \\'#166dba\\',\\n        },\\n        disabled: {\\n          backgroundColor: \\'#1e88e566\\',\\n        },\\n      },\\n      danger: {\\n        normal: {\\n          color: \\'#fff\\',\\n          backgroundColor: \\'#f4511e\\',\\n        },\\n        hover: {\\n          backgroundColor: \\'#f6774f\\',\\n        },\\n        active: {\\n          backgroundColor: \\'#d53b0a\\',\\n        },\\n        disabled: {\\n          backgroundColor: \\'#f4511e4d\\',\\n        },\\n      },\\n    },\\n    sizings: {\\n      s: {\\n        padding: \\'0 1rem\\',\\n        lineHeight: \\'1.75rem\\',\\n        fontSize: \\'.875rem\\',\\n      },\\n      m: {\\n        padding: \\'0 1.875rem\\',\\n        fontSize: \\'1rem\\',\\n        lineHeight: \\'2.375rem\\',\\n      },\\n      l: {\\n        padding: \\'0 2.5rem\\',\\n        lineHeight: \\'3.375rem\\',\\n        fontSize: \\'1.375rem\\',\\n      },\\n    },\\n    common: {\\n      fontWeight: \\'600\\',\\n      fontFamily: `\\'Inter var\\', sans-serif`,\\n    },\\n  }\\n  const Example = () => (\\n    /* TypographyProvider is required for ButtonProvider to work */\\n    <TypographyProvider>\\n      <ButtonProvider theme={theme}>\\n        <>\\n          <h2>Button sizes:</h2>\\n          <Button sizing=\\\"l\\\" className=\\\"margin-bottom\\\">\\n            small size\\n          </Button>\\n          <Button sizing=\\\"m\\\" className=\\\"margin-bottom\\\">\\n            medium size\\n          </Button>\\n          <Button sizing=\\\"s\\\" className=\\\"margin-bottom\\\">\\n            large size\\n          </Button>\\n\\n          <h2>Button types:</h2>\\n          <Button btnType=\\\"default\\\" className=\\\"margin-bottom\\\">\\n            default type\\n          </Button>\\n          <Button btnType=\\\"default\\\" disabled className=\\\"margin-bottom\\\">\\n            disabled\\n          </Button>\\n          <Button btnType=\\\"primary\\\" className=\\\"margin-bottom\\\">\\n            primary type\\n          </Button>\\n          <Button btnType=\\\"primary\\\" disabled className=\\\"margin-bottom\\\">\\n            disabled\\n          </Button>\\n          <Button btnType=\\\"danger\\\" className=\\\"margin-bottom\\\">\\n            danger type\\n          </Button>\\n          <Button btnType=\\\"danger\\\" disabled className=\\\"margin-bottom\\\">\\n            disabled\\n          </Button>\\n        </>\\n      </ButtonProvider>\\n    </TypographyProvider>\\n  )\\n\\n  return <Example />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TypographyProvider,\n      ModeProvider,\n      useMode,\n      ButtonProvider,\n      Button,\n      Spinner\n    }} mdxType=\"Playground\">\n  {() => {\n        const theme = {\n          btnTypes: {\n            default: {\n              normal: {\n                color: '#fff',\n                backgroundColor: '#868e96'\n              },\n              hover: {\n                backgroundColor: '#a1a7ae'\n              },\n              active: {\n                backgroundColor: '#6c747d'\n              },\n              disabled: {\n                backgroundColor: '#868e964d'\n              }\n            },\n            primary: {\n              normal: {\n                color: '#fff',\n                backgroundColor: '#1e88e5'\n              },\n              hover: {\n                backgroundColor: '#4ca0ea'\n              },\n              active: {\n                backgroundColor: '#166dba'\n              },\n              disabled: {\n                backgroundColor: '#1e88e566'\n              }\n            },\n            danger: {\n              normal: {\n                color: '#fff',\n                backgroundColor: '#f4511e'\n              },\n              hover: {\n                backgroundColor: '#f6774f'\n              },\n              active: {\n                backgroundColor: '#d53b0a'\n              },\n              disabled: {\n                backgroundColor: '#f4511e4d'\n              }\n            }\n          },\n          sizings: {\n            s: {\n              padding: '0 1rem',\n              lineHeight: '1.75rem',\n              fontSize: '.875rem'\n            },\n            m: {\n              padding: '0 1.875rem',\n              fontSize: '1rem',\n              lineHeight: '2.375rem'\n            },\n            l: {\n              padding: '0 2.5rem',\n              lineHeight: '3.375rem',\n              fontSize: '1.375rem'\n            }\n          },\n          common: {\n            fontWeight: '600',\n            fontFamily: `'Inter var', sans-serif`\n          }\n        };\n\n        const Example = () =>\n        /* TypographyProvider is required for ButtonProvider to work */\n        <TypographyProvider mdxType=\"TypographyProvider\">\n    <ButtonProvider theme={theme} mdxType=\"ButtonProvider\">\n      <>\n        <h2>Button sizes:</h2>\n        <Button sizing=\"l\" className=\"margin-bottom\" mdxType=\"Button\">\n          small size\n        </Button>\n        <Button sizing=\"m\" className=\"margin-bottom\" mdxType=\"Button\">\n          medium size\n        </Button>\n        <Button sizing=\"s\" className=\"margin-bottom\" mdxType=\"Button\">\n          large size\n        </Button>\n\n        <h2>Button types:</h2>\n        <Button btnType=\"default\" className=\"margin-bottom\" mdxType=\"Button\">\n          default type\n        </Button>\n        <Button btnType=\"default\" disabled className=\"margin-bottom\" mdxType=\"Button\">\n          disabled\n        </Button>\n        <Button btnType=\"primary\" className=\"margin-bottom\" mdxType=\"Button\">\n          primary type\n        </Button>\n        <Button btnType=\"primary\" disabled className=\"margin-bottom\" mdxType=\"Button\">\n          disabled\n        </Button>\n        <Button btnType=\"danger\" className=\"margin-bottom\" mdxType=\"Button\">\n          danger type\n        </Button>\n        <Button btnType=\"danger\" disabled className=\"margin-bottom\" mdxType=\"Button\">\n          disabled\n        </Button>\n      </>\n    </ButtonProvider>\n  </TypographyProvider>;\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","export { default as TypographyProvider } from './TypographyProvider';\nexport { default as Text } from './Text/Text';\nexport { default as Heading } from './Heading/Heading';\nexport * from './typographySelectors';\n"],"sourceRoot":""}